{"version":3,"sources":["components/header/Header.js","components/meme-generator/MemeGeneratorComponent.js","components/meme-generator/MemeGeneratorContainer.js","components/App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","menuButton","marginRight","spacing","title","flexGrow","Header","classes","AppBar","position","Toolbar","IconButton","edge","className","color","aria-label","Typography","variant","Button","root","marginTop","minWidth","fontSize","memeText","fontFamily","textTransform","letterSpacing","left","right","margin","textShadow","MemeGeneratorComponent","props","Card","CardContent","noValidate","autoComplete","style","display","flexWrap","TextField","id","name","label","fullWidth","value","topText","onChange","bottomText","textAlign","src","randomImage","alt","maxHeight","top","bottom","CardActions","onClick","MemeGeneratorContainer","state","allMemeImages","onChangeHandle","bind","onCLickHandle","fetch","then","response","json","memes","data","console","log","setState","event","target","this","newMemeImage","getRandomItem","url","items","Math","floor","random","length","Component","App","Container","maxWidth","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ca5ce9d1.chunk.js","sourcesContent":["import React from 'react';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport EmojiEmotionsIcon from '@material-ui/icons/EmojiEmotions';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n}));\r\n\r\nexport default function Header() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <AppBar position=\"static\">\r\n      <Toolbar>\r\n        <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\r\n          <EmojiEmotionsIcon/>\r\n        </IconButton>\r\n        <Typography variant=\"h6\" className={classes.title}>\r\n          Meme Generator\r\n        </Typography>\r\n        <Button color=\"inherit\">Anthony Gonzalez</Button>\r\n      </Toolbar>\r\n    </AppBar>\r\n  )\r\n}\r\n","import React from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    marginTop: 40,\r\n    minWidth: 275,\r\n  },\r\n  title: {\r\n    fontSize: 14,\r\n  },\r\n  memeText: {\r\n    fontFamily: 'impact',\r\n    fontSize: '2.5em',\r\n    textTransform: 'uppercase',\r\n    color: 'white',\r\n    letterSpacing: 1,\r\n    position: 'absolute',\r\n    left: 0,\r\n    right: 0,\r\n    margin: 12,\r\n    textShadow: '2px 2px 0 #000,  -2px -2px 0 #000, 2px -2px 0 #000,  -2px 2px 0 #000, 0px 2px 0 #000, 2px 0px 0 #000, 0px -2px 0 #000,  -2px 0px 0 #000, 2px 2px 5px #000'\r\n  }\r\n});\r\n\r\nexport default function MemeGeneratorComponent(props) {\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Card className={classes.root}>\r\n      <CardContent>\r\n\r\n        <form noValidate autoComplete=\"off\" style={{display: 'flex', flexWrap: 'wrap',}}>\r\n\r\n          <TextField id=\"topText\" name=\"topText\" label=\"Top Text\"\r\n                     fullWidth style={{margin: 12}}\r\n                     value={props.topText} onChange={props.onChange}/>\r\n\r\n          <TextField id=\"bottomText\" name=\"bottomText\" label=\"Bottom Text\"\r\n                     fullWidth style={{margin: 12}}\r\n                     value={props.bottomText} onChange={props.onChange}/>\r\n        </form>\r\n\r\n        <div style={{margin: 12, textAlign: 'center', position: 'relative'}}>\r\n          <img src={props.randomImage} alt=\"\" style={{maxHeight: 400}}/>\r\n          <h3 className={classes.memeText} style={{top: 0}}>{props.topText}</h3>\r\n          <h3 className={classes.memeText} style={{bottom: 0}}>{props.bottomText}</h3>\r\n        </div>\r\n\r\n      </CardContent>\r\n\r\n      <CardActions>\r\n        <Button variant=\"contained\" color=\"secondary\" onClick={props.onClick}>Get Random Image</Button>\r\n      </CardActions>\r\n    </Card>\r\n  )\r\n}\r\n","import React, {Component} from \"react\";\r\nimport MemeGeneratorComponent from \"./MemeGeneratorComponent\";\r\n\r\nexport default class MemeGeneratorContainer extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      topText: '',\r\n      bottomText: '',\r\n      randomImage: 'http://i.imgflip.com/1bij.jpg',\r\n      allMemeImages: []\r\n    }\r\n    this.onChangeHandle = this.onChangeHandle.bind(this)\r\n    this.onCLickHandle = this.onCLickHandle.bind(this)\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch('https://api.imgflip.com/get_memes')\r\n    .then(response => response.json())\r\n    .then(response => {\r\n      const {memes} = response.data\r\n      console.log(memes[0])\r\n      this.setState({allMemeImages: memes})\r\n    })\r\n  }\r\n\r\n  onChangeHandle(event) {\r\n    const {name, value} = event.target\r\n    this.setState({[name]: value})\r\n  }\r\n\r\n  onCLickHandle() {\r\n    const newMemeImage = this.getRandomItem(this.state.allMemeImages).url;\r\n    this.setState({randomImage: newMemeImage})\r\n  }\r\n\r\n  getRandomItem(items) {\r\n    return items[Math.floor(Math.random() * items.length)];\r\n  }\r\n\r\n  render() {\r\n    return (<MemeGeneratorComponent\r\n      topText={this.state.topText}\r\n      bottomText={this.state.bottomText}\r\n      randomImage={this.state.randomImage}\r\n      onClick={this.onCLickHandle}\r\n      onChange={this.onChangeHandle}\r\n    />)\r\n  }\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport Header from \"./header/Header\";\nimport Container from \"@material-ui/core/Container\";\nimport MemeGeneratorContainer from \"./meme-generator/MemeGeneratorContainer\";\n\nexport default function App() {\n  return (\n    <div>\n      <Header/>\n      <Container maxWidth=\"md\">\n        <MemeGeneratorContainer/>\n      </Container>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}